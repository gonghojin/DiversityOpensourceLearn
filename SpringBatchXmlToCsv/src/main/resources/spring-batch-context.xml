<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:batch="http://www.springframework.org/schema/batch" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-3.0.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd">
 <!--JobRepository and JobLauncher 환경설정 및  classes 구성  -->
    <bean id="jobRepository" class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean" />
 
    <bean id="jobLauncher"   class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
        <property name="jobRepository" ref="jobRepository" />
    </bean>
 
    <!-- ItemWriter write a line into output flat file -->
    <bean id="flatFileItemWriter" class="org.springframework.batch.item.file.FlatFileItemWriter" scope="step">
 
        <property name="resource" value="file:csv/examResult.txt" />
 
        <property name="lineAggregator">
 
            <!-- An Aggregator는 객채를 범위가 정해진 string의 list로 전환한다-->
            <bean class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
 
                <property name="delimiter" value="|" />
 
                <property name="fieldExtractor">
 
                    <!-- Extractor는 리플렉션을 통해서 beans property 값을 리턴한다 -->
                    <bean class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
                        <property name="names" value="studentName, percentage, dob" />
                    </bean>
                </property>
            </bean>
        </property>
    </bean>
 
    <!-- ItemReader는 XML file의 데이터를 읽는다 -->
    <bean id="xmlItemReader" class="org.springframework.batch.item.xml.StaxEventItemReader">
 
        <property name="resource" value="classpath:examResult.xml" />
 
        <property name="fragmentRootElementName" value="ExamResult" />
 
        <property name="unmarshaller">
            <bean class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
                <property name="classesToBeBound">
                    <list>
                        <value>com.websystique.springbatch.model.ExamResult</value>
                    </list>
                </property>
            </bean>
        </property>
    </bean>
 
 
    <!-- Optional ItemProcessor to perform business logic/filtering on the input records -->
    <bean id="itemProcessor" class="com.websystique.springbatch.ExamResultItemProcessor" />
 
    <!-- Optional JobExecutionListener to perform business logic before and after the job -->
    <bean id="jobListener" class="com.websystique.springbatch.ExamResultJobListener" />
 
    <!-- Step will need a transaction manager -->
    <bean id="transactionManager" class="org.springframework.batch.support.transaction.ResourcelessTransactionManager" />
 
    <!-- Actual Job -->
    <batch:job id="examResultJob">
        <batch:step id="step1">
            <batch:tasklet transaction-manager="transactionManager">
                <batch:chunk reader="xmlItemReader" writer="flatFileItemWriter"
                    processor="itemProcessor" commit-interval="10" />
            </batch:tasklet>
        </batch:step>
        <batch:listeners>
            <batch:listener ref="jobListener" />
        </batch:listeners>
    </batch:job>
</beans>